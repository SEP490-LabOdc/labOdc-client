/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CompanyRouteRouteImport } from './routes/company/route'
import { Route as publicRouteRouteImport } from './routes/(public)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as CompanyIndexRouteImport } from './routes/company/index'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as AuthenticatedAdminRouteRouteImport } from './routes/_authenticated/admin/route'
import { Route as AuthenticatedAdminIndexRouteImport } from './routes/_authenticated/admin/index'
import { Route as publicTermsIndexRouteImport } from './routes/(public)/terms/index'
import { Route as publicTalentPoolIndexRouteImport } from './routes/(public)/talent-pool/index'
import { Route as publicPrivacyIndexRouteImport } from './routes/(public)/privacy/index'
import { Route as publicCompaniesIndexRouteImport } from './routes/(public)/companies/index'
import { Route as authSignUpIndexRouteImport } from './routes/(auth)/sign-up/index'
import { Route as authSignInIndexRouteImport } from './routes/(auth)/sign-in/index'
import { Route as authForgotPasswordIndexRouteImport } from './routes/(auth)/forgot-password/index'

const CompanyRouteRoute = CompanyRouteRouteImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRouteImport,
} as any)
const publicRouteRoute = publicRouteRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const CompanyIndexRoute = CompanyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CompanyRouteRoute,
} as any)
const publicIndexRoute = publicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedAdminRouteRoute = AuthenticatedAdminRouteRouteImport.update({
  id: '/_authenticated/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedAdminIndexRoute = AuthenticatedAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedAdminRouteRoute,
} as any)
const publicTermsIndexRoute = publicTermsIndexRouteImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicTalentPoolIndexRoute = publicTalentPoolIndexRouteImport.update({
  id: '/talent-pool/',
  path: '/talent-pool/',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicPrivacyIndexRoute = publicPrivacyIndexRouteImport.update({
  id: '/privacy/',
  path: '/privacy/',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicCompaniesIndexRoute = publicCompaniesIndexRouteImport.update({
  id: '/companies/',
  path: '/companies/',
  getParentRoute: () => publicRouteRoute,
} as any)
const authSignUpIndexRoute = authSignUpIndexRouteImport.update({
  id: '/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => authRouteRoute,
} as any)
const authSignInIndexRoute = authSignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => authRouteRoute,
} as any)
const authForgotPasswordIndexRoute = authForgotPasswordIndexRouteImport.update({
  id: '/forgot-password/',
  path: '/forgot-password/',
  getParentRoute: () => authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/company': typeof CompanyRouteRouteWithChildren
  '/admin': typeof AuthenticatedAdminRouteRouteWithChildren
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/company/': typeof CompanyIndexRoute
  '/forgot-password': typeof authForgotPasswordIndexRoute
  '/sign-in': typeof authSignInIndexRoute
  '/sign-up': typeof authSignUpIndexRoute
  '/companies': typeof publicCompaniesIndexRoute
  '/privacy': typeof publicPrivacyIndexRoute
  '/talent-pool': typeof publicTalentPoolIndexRoute
  '/terms': typeof publicTermsIndexRoute
  '/admin/': typeof AuthenticatedAdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/company': typeof CompanyIndexRoute
  '/forgot-password': typeof authForgotPasswordIndexRoute
  '/sign-in': typeof authSignInIndexRoute
  '/sign-up': typeof authSignUpIndexRoute
  '/companies': typeof publicCompaniesIndexRoute
  '/privacy': typeof publicPrivacyIndexRoute
  '/talent-pool': typeof publicTalentPoolIndexRoute
  '/terms': typeof publicTermsIndexRoute
  '/admin': typeof AuthenticatedAdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(public)': typeof publicRouteRouteWithChildren
  '/company': typeof CompanyRouteRouteWithChildren
  '/_authenticated/admin': typeof AuthenticatedAdminRouteRouteWithChildren
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/(public)/': typeof publicIndexRoute
  '/company/': typeof CompanyIndexRoute
  '/(auth)/forgot-password/': typeof authForgotPasswordIndexRoute
  '/(auth)/sign-in/': typeof authSignInIndexRoute
  '/(auth)/sign-up/': typeof authSignUpIndexRoute
  '/(public)/companies/': typeof publicCompaniesIndexRoute
  '/(public)/privacy/': typeof publicPrivacyIndexRoute
  '/(public)/talent-pool/': typeof publicTalentPoolIndexRoute
  '/(public)/terms/': typeof publicTermsIndexRoute
  '/_authenticated/admin/': typeof AuthenticatedAdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/company'
    | '/admin'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/company/'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/companies'
    | '/privacy'
    | '/talent-pool'
    | '/terms'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/company'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/companies'
    | '/privacy'
    | '/talent-pool'
    | '/terms'
    | '/admin'
  id:
    | '__root__'
    | '/(auth)'
    | '/(public)'
    | '/company'
    | '/_authenticated/admin'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/(public)/'
    | '/company/'
    | '/(auth)/forgot-password/'
    | '/(auth)/sign-in/'
    | '/(auth)/sign-up/'
    | '/(public)/companies/'
    | '/(public)/privacy/'
    | '/(public)/talent-pool/'
    | '/(public)/terms/'
    | '/_authenticated/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  publicRouteRoute: typeof publicRouteRouteWithChildren
  CompanyRouteRoute: typeof CompanyRouteRouteWithChildren
  AuthenticatedAdminRouteRoute: typeof AuthenticatedAdminRouteRouteWithChildren
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/company/': {
      id: '/company/'
      path: '/'
      fullPath: '/company/'
      preLoaderRoute: typeof CompanyIndexRouteImport
      parentRoute: typeof CompanyRouteRoute
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/admin': {
      id: '/_authenticated/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthenticatedAdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/admin/': {
      id: '/_authenticated/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AuthenticatedAdminIndexRouteImport
      parentRoute: typeof AuthenticatedAdminRouteRoute
    }
    '/(public)/terms/': {
      id: '/(public)/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof publicTermsIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/talent-pool/': {
      id: '/(public)/talent-pool/'
      path: '/talent-pool'
      fullPath: '/talent-pool'
      preLoaderRoute: typeof publicTalentPoolIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/privacy/': {
      id: '/(public)/privacy/'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof publicPrivacyIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/companies/': {
      id: '/(public)/companies/'
      path: '/companies'
      fullPath: '/companies'
      preLoaderRoute: typeof publicCompaniesIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(auth)/sign-up/': {
      id: '/(auth)/sign-up/'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/sign-in/': {
      id: '/(auth)/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/forgot-password/': {
      id: '/(auth)/forgot-password/'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authForgotPasswordIndexRoute: typeof authForgotPasswordIndexRoute
  authSignInIndexRoute: typeof authSignInIndexRoute
  authSignUpIndexRoute: typeof authSignUpIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordIndexRoute: authForgotPasswordIndexRoute,
  authSignInIndexRoute: authSignInIndexRoute,
  authSignUpIndexRoute: authSignUpIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface publicRouteRouteChildren {
  publicIndexRoute: typeof publicIndexRoute
  publicCompaniesIndexRoute: typeof publicCompaniesIndexRoute
  publicPrivacyIndexRoute: typeof publicPrivacyIndexRoute
  publicTalentPoolIndexRoute: typeof publicTalentPoolIndexRoute
  publicTermsIndexRoute: typeof publicTermsIndexRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicIndexRoute: publicIndexRoute,
  publicCompaniesIndexRoute: publicCompaniesIndexRoute,
  publicPrivacyIndexRoute: publicPrivacyIndexRoute,
  publicTalentPoolIndexRoute: publicTalentPoolIndexRoute,
  publicTermsIndexRoute: publicTermsIndexRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

interface CompanyRouteRouteChildren {
  CompanyIndexRoute: typeof CompanyIndexRoute
}

const CompanyRouteRouteChildren: CompanyRouteRouteChildren = {
  CompanyIndexRoute: CompanyIndexRoute,
}

const CompanyRouteRouteWithChildren = CompanyRouteRoute._addFileChildren(
  CompanyRouteRouteChildren,
)

interface AuthenticatedAdminRouteRouteChildren {
  AuthenticatedAdminIndexRoute: typeof AuthenticatedAdminIndexRoute
}

const AuthenticatedAdminRouteRouteChildren: AuthenticatedAdminRouteRouteChildren =
  {
    AuthenticatedAdminIndexRoute: AuthenticatedAdminIndexRoute,
  }

const AuthenticatedAdminRouteRouteWithChildren =
  AuthenticatedAdminRouteRoute._addFileChildren(
    AuthenticatedAdminRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  publicRouteRoute: publicRouteRouteWithChildren,
  CompanyRouteRoute: CompanyRouteRouteWithChildren,
  AuthenticatedAdminRouteRoute: AuthenticatedAdminRouteRouteWithChildren,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
