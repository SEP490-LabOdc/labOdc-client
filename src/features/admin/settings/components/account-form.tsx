import { useEffect } from 'react'
import { z } from 'zod'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { Button } from '@/components/ui/button'
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { DatePicker } from '@/components/date-picker'
import { SelectDropdown } from '@/components/select-dropdown'
import { useGetUserById, useUpdateProfile } from '@/hooks/api/users'
import { toast } from 'sonner'

// ‚úÖ Schema kh·ªõp v·ªõi API /api/v1/users/{id}/profile
const profileSchema = z.object({
    fullName: z.string().min(1, 'H·ªç v√† t√™n l√† b·∫Øt bu·ªôc.'),
    phone: z.string().min(1, 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc.'),
    gender: z.enum(['MALE', 'FEMALE', 'OTHER']),
    birthDate: z.date(),
    address: z.string().min(1, 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc.'),
    avatarUrl: z.string().url('Avatar ph·∫£i l√† URL h·ª£p l·ªá.').optional(),
})

export type ProfileFormValues = z.infer<typeof profileSchema>

export function AccountForm() {
    const userId = typeof window !== 'undefined' ? localStorage.getItem('user_id') : null

    const { data: userData, isLoading, refetch } = useGetUserById(userId);

    const { mutateAsync: updateProfile } = useUpdateProfile()

    const form = useForm<ProfileFormValues>({
        resolver: zodResolver(profileSchema),
        defaultValues: {
            fullName: '',
            phone: '',
            gender: 'OTHER',
            birthDate: new Date(),
            address: '',
            avatarUrl: '',
        },
    })

    useEffect(() => {
        if (userId) refetch()
    }, [userId, refetch])

    useEffect(() => {
        if (userData) {
            form.reset({
                fullName: userData.data.fullName ?? '',
                phone: userData.data.phone ?? '',
                gender: userData.data.gender ?? 'OTHER',
                birthDate: userData.data.birthDate ? new Date(userData.data.birthDate) : new Date(),
                address: userData.data.address ?? '',
                avatarUrl: userData.data.avatarUrl ?? '',
            })
        }
    }, [userData, form])

    // üîπ Submit form ƒë·ªÉ c·∫≠p nh·∫≠t profile
    const onSubmit = async (values: ProfileFormValues) => {
        if (!userId) return toast.error('Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng!')

        const promise = updateProfile({
            id: userId,
            payload: {
                fullName: values.fullName,
                phone: values.phone,
                gender: values.gender,
                birthDate: values.birthDate.toISOString().split('T')[0],
                address: values.address,
                avatarUrl: values.avatarUrl,
            },
        })

        toast.promise(promise, {
            loading: 'ƒêang c·∫≠p nh·∫≠t h·ªì s∆°...',
            success: 'C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!',
            error: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!',
        })

        await promise
    }

    if (isLoading) {
        return <p className="text-center py-6">ƒêang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng...</p>
    }

    return (
        <div className="max-w-3xl mx-auto space-y-8">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                    <FormField
                        control={form.control}
                        name="fullName"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>H·ªç v√† t√™n</FormLabel>
                                <FormControl>
                                    <Input placeholder="VD: Ho√†ng VƒÉn Nam" {...field} />
                                </FormControl>
                                <FormDescription>T√™n hi·ªÉn th·ªã c√¥ng khai c·ªßa b·∫°n.</FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    <FormField
                        control={form.control}
                        name="phone"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>S·ªë ƒëi·ªán tho·∫°i</FormLabel>
                                <FormControl>
                                    <Input placeholder="+84 908 899 008" {...field} />
                                </FormControl>
                                <FormDescription>D√πng ƒë·ªÉ li√™n h·ªá v√† x√°c minh t√†i kho·∫£n.</FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    <FormField
                        control={form.control}
                        name="gender"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Gi·ªõi t√≠nh</FormLabel>
                                <SelectDropdown
                                    defaultValue={field.value}
                                    onValueChange={field.onChange}
                                    placeholder="Ch·ªçn gi·ªõi t√≠nh"
                                    items={[
                                        { label: 'Nam', value: 'MALE' },
                                        { label: 'N·ªØ', value: 'FEMALE' },
                                        { label: 'Kh√°c', value: 'OTHER' },
                                    ]}
                                    className="w-[200px]"
                                />
                                <FormDescription>Ch·ªçn gi·ªõi t√≠nh ph√π h·ª£p c·ªßa b·∫°n.</FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    <FormField
                        control={form.control}
                        name="birthDate"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Ng√†y sinh</FormLabel>
                                <DatePicker selected={field.value} onSelect={field.onChange} />
                                <FormDescription>Ng√†y sinh c·ªßa b·∫°n.</FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    <FormField
                        control={form.control}
                        name="address"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>ƒê·ªãa ch·ªâ</FormLabel>
                                <FormControl>
                                    <Input placeholder="VD: H√† N·ªôi" {...field} />
                                </FormControl>
                                <FormDescription>N∆°i b·∫°n ƒëang sinh s·ªëng.</FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    <FormField
                        control={form.control}
                        name="avatarUrl"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>·∫¢nh ƒë·∫°i di·ªán (URL)</FormLabel>
                                <FormControl>
                                    <Input placeholder="https://..." {...field} />
                                </FormControl>
                                <FormDescription>D√°n li√™n k·∫øt ·∫£nh ƒë·∫°i di·ªán c·ªßa b·∫°n.</FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    <div className="flex justify-start pb-3">
                        <Button type="submit">C·∫≠p nh·∫≠t h·ªì s∆°</Button>
                    </div>
                </form>
            </Form>
        </div>
    )
}
