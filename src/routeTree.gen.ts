/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicRouteRouteImport } from './routes/(public)/route'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as publicTalentPoolIndexRouteImport } from './routes/(public)/talent-pool/index'
import { Route as publicMarketplaceIndexRouteImport } from './routes/(public)/marketplace/index'
import { Route as publicLearningIndexRouteImport } from './routes/(public)/learning/index'
import { Route as publicForEnterprisesIndexRouteImport } from './routes/(public)/for-enterprises/index'
import { Route as publicContactIndexRouteImport } from './routes/(public)/contact/index'
import { Route as authSignInIndexRouteImport } from './routes/(auth)/sign-in/index'
import { Route as authForgotPasswordIndexRouteImport } from './routes/(auth)/forgot-password/index'

const publicRouteRoute = publicRouteRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const publicIndexRoute = publicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const publicTalentPoolIndexRoute = publicTalentPoolIndexRouteImport.update({
  id: '/talent-pool/',
  path: '/talent-pool/',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicMarketplaceIndexRoute = publicMarketplaceIndexRouteImport.update({
  id: '/marketplace/',
  path: '/marketplace/',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicLearningIndexRoute = publicLearningIndexRouteImport.update({
  id: '/learning/',
  path: '/learning/',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicForEnterprisesIndexRoute =
  publicForEnterprisesIndexRouteImport.update({
    id: '/for-enterprises/',
    path: '/for-enterprises/',
    getParentRoute: () => publicRouteRoute,
  } as any)
const publicContactIndexRoute = publicContactIndexRouteImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => publicRouteRoute,
} as any)
const authSignInIndexRoute = authSignInIndexRouteImport.update({
  id: '/(auth)/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordIndexRoute = authForgotPasswordIndexRouteImport.update({
  id: '/(auth)/forgot-password/',
  path: '/forgot-password/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/forgot-password': typeof authForgotPasswordIndexRoute
  '/sign-in': typeof authSignInIndexRoute
  '/contact': typeof publicContactIndexRoute
  '/for-enterprises': typeof publicForEnterprisesIndexRoute
  '/learning': typeof publicLearningIndexRoute
  '/marketplace': typeof publicMarketplaceIndexRoute
  '/talent-pool': typeof publicTalentPoolIndexRoute
}
export interface FileRoutesByTo {
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/': typeof publicIndexRoute
  '/forgot-password': typeof authForgotPasswordIndexRoute
  '/sign-in': typeof authSignInIndexRoute
  '/contact': typeof publicContactIndexRoute
  '/for-enterprises': typeof publicForEnterprisesIndexRoute
  '/learning': typeof publicLearningIndexRoute
  '/marketplace': typeof publicMarketplaceIndexRoute
  '/talent-pool': typeof publicTalentPoolIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(public)': typeof publicRouteRouteWithChildren
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/(public)/': typeof publicIndexRoute
  '/(auth)/forgot-password/': typeof authForgotPasswordIndexRoute
  '/(auth)/sign-in/': typeof authSignInIndexRoute
  '/(public)/contact/': typeof publicContactIndexRoute
  '/(public)/for-enterprises/': typeof publicForEnterprisesIndexRoute
  '/(public)/learning/': typeof publicLearningIndexRoute
  '/(public)/marketplace/': typeof publicMarketplaceIndexRoute
  '/(public)/talent-pool/': typeof publicTalentPoolIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/forgot-password'
    | '/sign-in'
    | '/contact'
    | '/for-enterprises'
    | '/learning'
    | '/marketplace'
    | '/talent-pool'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
    | '/forgot-password'
    | '/sign-in'
    | '/contact'
    | '/for-enterprises'
    | '/learning'
    | '/marketplace'
    | '/talent-pool'
  id:
    | '__root__'
    | '/(public)'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/(public)/'
    | '/(auth)/forgot-password/'
    | '/(auth)/sign-in/'
    | '/(public)/contact/'
    | '/(public)/for-enterprises/'
    | '/(public)/learning/'
    | '/(public)/marketplace/'
    | '/(public)/talent-pool/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  publicRouteRoute: typeof publicRouteRouteWithChildren
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
  authForgotPasswordIndexRoute: typeof authForgotPasswordIndexRoute
  authSignInIndexRoute: typeof authSignInIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/talent-pool/': {
      id: '/(public)/talent-pool/'
      path: '/talent-pool'
      fullPath: '/talent-pool'
      preLoaderRoute: typeof publicTalentPoolIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/marketplace/': {
      id: '/(public)/marketplace/'
      path: '/marketplace'
      fullPath: '/marketplace'
      preLoaderRoute: typeof publicMarketplaceIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/learning/': {
      id: '/(public)/learning/'
      path: '/learning'
      fullPath: '/learning'
      preLoaderRoute: typeof publicLearningIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/for-enterprises/': {
      id: '/(public)/for-enterprises/'
      path: '/for-enterprises'
      fullPath: '/for-enterprises'
      preLoaderRoute: typeof publicForEnterprisesIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/contact/': {
      id: '/(public)/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof publicContactIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(auth)/sign-in/': {
      id: '/(auth)/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password/': {
      id: '/(auth)/forgot-password/'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface publicRouteRouteChildren {
  publicIndexRoute: typeof publicIndexRoute
  publicContactIndexRoute: typeof publicContactIndexRoute
  publicForEnterprisesIndexRoute: typeof publicForEnterprisesIndexRoute
  publicLearningIndexRoute: typeof publicLearningIndexRoute
  publicMarketplaceIndexRoute: typeof publicMarketplaceIndexRoute
  publicTalentPoolIndexRoute: typeof publicTalentPoolIndexRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicIndexRoute: publicIndexRoute,
  publicContactIndexRoute: publicContactIndexRoute,
  publicForEnterprisesIndexRoute: publicForEnterprisesIndexRoute,
  publicLearningIndexRoute: publicLearningIndexRoute,
  publicMarketplaceIndexRoute: publicMarketplaceIndexRoute,
  publicTalentPoolIndexRoute: publicTalentPoolIndexRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  publicRouteRoute: publicRouteRouteWithChildren,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
  authForgotPasswordIndexRoute: authForgotPasswordIndexRoute,
  authSignInIndexRoute: authSignInIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
